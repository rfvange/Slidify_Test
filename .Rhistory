film$Budget[film$Rating=='R']
mean(film$Budget[film$Rating=='R'&film$Budget!='NA'])
film$Budget[film$Rating=='R'&film$Budget!='NA']
film$Budget[film$Rating=='R'&film$Budget!=NA]
film$Budget[film$Rating=='R'&&film$Budget!='NA']
film$Budget[film$Rating=='R'&&film$Budget=='NA']
film$Budget[film$Rating=='R'&film$Budget=='NA']
film$Budget[film$Rating=='R'&film$Budget!='NA']
film$Budget[film$Rating=='R' & film$Budget!='NA']
film$Budget[film$Rating=='R' & film$Film!='The Bodyguard']
mean(film$Budget[film$Rating=='R' & film$Film!='The Bodyguard'])
aggregate(Budget~Rating,film,mean)
aggregate(Budget~Rating,film,sd)
budgetmodel <- aov(film$Budget~film$Rating)
summary(budgetmodel)
TukeyHSD(budgetmodel)
aggregate(IMDB~Rating,film,mean)
imdbmodel <- aov(film$IMDB~film$Rating)
summary(imdbmodel)
?Arithmetic
?Comparison
?as
?is
library("SDSFoundations")
data(FilmData)
film <- FilmData
rm(FilmData)
View(film)
>
mean(film$Budget[film$Rating=='R'],na.rm=T)
table(film$Rating)
table(film$Studio)
# number of top films per studio
mean(film$Days[film$Studio=='Sony'])
mean(film$Days[film$Studio=='Fox'])
daysmodel <- aov(film$Days~film$Studio)
summary(daysmodel)
TukeyHSD(daysmodel)
mean(film$Gross[film$Studio=='Universal'])
mean(film$Gross[film$Studio=='Uni.'])
mean(film$Pct.Dom[film$Studio=='Uni.'])
mean(film$Pct.Dom[film$Studio=='Sony'])
pctmodel <- aov(film$Pct.Dom~film$Studio)
summary(pctmodel)
TukeyHSD(pctmodel)
aggregate(Days~Studio,film,mean)
aggregate(Days~Studio,film,summary)
boxplot(film$Days~film$Studio)
hist(film$Days~film$Studio)
film$Budget.Class <- if(film$Budget<100.0){"Low_Budget"}
film$Budget.Class <- if(film$Budget<100.0){print "Low_Budget"}
film$Budget.Class <- if(film$Budget<100.0){print 'Low_Budget'}
film$Budget.Class <- if(film$Budget<100.0){print ('Low_Budget')}
film$Budget.Class <- if(film$Budget>=100.0 & film$Budget<= 150.0){print ('Med_Budget')}
film$Budget.Class <- if(film$Budget > 150.0){print ('High_Budget')}
View(film)
lowbudget <- film[film$Budget<100.0,]
medbudget <- film[film$Budget>=100.0 & film$Budget<=150.0,]
highbudget <- film[film$Budget>150.0,]
head(highbudget$Budget)
head(medbudget$Budget)
head(lowbudget$Budget)
lowbudget
medbudget
highbudget
highbudget <- film[film$Budget>=150.0,]
medbudget <- film[film$Budget>=100.0 & film$Budget<150.0,]
mb <- complete.cases(medbudget)
mbc <- medbudget[mb]
mbc <- medbudget[mb,]
hb <- complete.cases(highbudget)
hbc <- highbudget[hb,]
lb <- complete.cases(lowbudget)
lbc <- lowbudget[lb,]
# the above remove all NA items
# items lbc, mbc, and hbc are "clean" of NAs
mean(mbc$Gross.Dom)
mean(mbc$Pct.Dom)
mean(hbc$Pct.Dom)
mean(lbc$Pct.Dom)
filmc <- film[complete.cases(film),]
View(filmc)
if(filmc$Budget>=100.0 & filmc$Budget<150.0)
{}
if(filmc$Budget>=100.0) {filmc$Budget<150.0)
if(filmc$Budget>=100.0) {}
ifelse(filmc$Budget>=100.0 & filmc$Budget<150.0, filmc$Budget.Class <- 'High_Budget',)
ifelse(filmc$Budget>=100.0 & filmc$Budget<150.0, filmc$Budget.Class <- 'High_Budget',xyz <- 'x')
ifelse(filmc$Budget>=100.0 & filmc$Budget<150.0, filmc$Budget.Class <- 'Med_Budget',xyz <- 'x')
View(filmc)
filmc$Budget.Class[filmc$Budget < 100] <- "Low_Budget"
View(filmc)
filmc$Budget.Class[film$Budget>=100.0 & film$Budget<150.0] <- "Med_Budget"
filmc$Budget.Class[filmc$Budget>=100.0 & filmc$Budget<150.0] <- "Med_Budget"
View(filmc)
filmc$Budget.Class[filmc$Budget>=150.0] <- "High_Budget"
View(filmc)
boxplot(filmc$Pct.Dom~filmc$Budget.Class)
View(mbc)
dommodel <- aov(film$Pct.Dom~film$Budget.Class)
dommodel <- aov(filmc$Pct.Dom~filmc$Budget.Class)
summary(dommodel)
TukeyHSD(dommodel)
Sect1 = c(8,4,6,8,6,4)
Sect2 = c(3,7,0,2,7,5)
Sect3 = c(1,2,7,6,5,0)
allsect = c(Sect1,Sect2,Sect3)
allsect
allmean <- mean(allsect)
allmeansq <- allmean^2
allsectsq <- allsect^2
allvect <- allsectsq-allmeansq
SSt<-sum(allvect)
allvect
sect1diff<-Sect1-allmean
sect2diff<-Sect2-allmean
sect3diff<-Sect3-allmean
SSb<-6*sect1diff^2 + 6*sect2diff^2 + 6*sect3diff^2
Sect1mean<-mean(Sect1)
Sect2mean<-mean(Sect2)
Sect3mean<-mean(Sect3)
SSb<-6*(Sect1mean-allmean)^2 + 6*(Sect2mean-allmean)^2 + 6*(Sect3mean-allmean)^2
SSb<-3*(Sect1mean-allmean)^2 + 3*(Sect2mean-allmean)^2 + 3*(Sect3mean-allmean)^2
SSb<-6*(Sect1mean-allmean)^2 + 6*(Sect2mean-allmean)^2 + 6*(Sect3mean-allmean)^2
MSb<-SSb/2
SSw<-SSt-SSb
MSw<-SSw/15
F<-MSb/MSw
f
F
s = c(163,150,163)
d = c(84,95,85)
h = c(69,72,70)
mean(s)
mean(d)
mean(h)
sd(s)
sd(d)
sd(h)
?corr
?cor
x1 = c(7.0,6.4,6.9,5.5,6.5)
x2 = c(3.2,3.2,3.1,2.3,2.8)
cor(x1,x2)
?binom
?rand
?rbinom
rbinom(5,10,0.5)
rbinom(10,10,0.5)
rbinom(50,10,0.5)
hist(rbinom(50,10,0.5))
hist(rbinom(50,10,0.5),n=2)
hist(rbinom(50,10,0.5))
hist(rbinom(50,10,0.5),n=11)
hist(rbinom(50,10,0.5))
hist(rbinom(50,10,0.5))
hist(rbinom(50,10,0.5))
hist(rbinom(500,10,0.5))
hist(rbinom(500,10,0.5))
hist(rbinom(500,10,0.5))
hist(rbinom(500,10,0.5))
?rbinom
?hist
hist(rbinom(500,10,0.5))
hist(rbinom(500,10,0.5))
hist(rbinom(500,10,0.5))
hist(rbinom(500,10,0.5))
hist(rbinom(500,10,0.5))
stem(rbinom(500,10,0.5))
stem(rbinom(500,10,0.5)/10)
stem(rbinom(500,10,0.5)/10)
stem(rbinom(500,10,0.5)/100)
stem(10*rbinom(500,10,0.5))
?stem
stem(rbinom(500,10,0.5),10)
stem(rbinom(500,10,0.5),0.01)
stem(rbinom(500,10,0.5),1)
stem(rbinom(500,10,0.5),scale=10)
stem(rbinom(500,10,0.5),scale=0.1)
stem(rbinom(50,10,0.5),scale=1)
stem(rbinom(100,10,0.5),scale=1)
stem(rbinom(100,10,0.5),scale=1)
stem(rbinom(100,10,0.5),scale=1)
?count
?sum
summary(rbinom(100,10,0.5),)
summary(rbinom(100,10,0.5))
?stat
stem(rbinom(100,10,0.5),scale=1)
stem(rbinom(100,10,0.5),scale=1)
stem(rbinom(100,10,0.5),scale=1)
stem(rbinom(100,10,0.5),scale=1)
stem(rbinom(100,10,0.5),scale=1)
stem(rbinom(100,10,0.5),scale=1)
stem(rbinom(100,10,0.5),scale=1)
stem(rbinom(100,10,0.5),scale=1)
stem(rbinom(100,10,0.5),scale=1)
stem(rbinom(100,10,0.5),scale=1)
stem(rbinom(100,10,0.5),scale=1)
stem(rbinom(100,10,0.5),scale=1)
stem(rbinom(200,10,0.5),scale=1)
stem(rbinom(200,10,0.5),scale=1)
stem(rbinom(200,10,0.5),scale=1)
stem(rbinom(200,10,0.5),scale=1)
stem(rbinom(200,10,0.5),scale=1)
stem(rbinom(200,10,0.5),scale=1)
stem(rbinom(200,10,0.5),scale=1)
stem(rbinom(200,10,0.5),scale=1)
stem(rbinom(200,10,0.5),scale=1)
stem(rbinom(200,10,0.5),scale=1)
stem(rbinom(200,10,0.5),scale=1)
stem(rbinom(200,10,0.5),scale=1)
stem(rbinom(200,10,0.5),scale=1)
stem(rbinom(200,10,0.5),scale=1)
stem(rbinom(200,10,0.5),scale=1)
stem(rbinom(200,10,0.5),scale=1)
stem(rbinom(200,10,0.5),scale=1)
stem(rbinom(200,10,0.5),scale=1)
stem(rbinom(200,10,0.5),scale=1)
stem(rbinom(200,10,0.5),scale=1)
stem(rbinom(200,10,0.5),scale=1)
stem(rbinom(200,10,0.5),scale=1)
stem(rbinom(200,10,0.5),scale=1,width=10)
stem(rbinom(200,10,0.5),scale=1,width=10)
stem(rbinom(200,10,0.5),scale=1,width=1)
stem(rbinom(200,10,0.5),scale=1,width=1)
stem(rbinom(200,10,0.5),scale=1,width=1)
stem(rbinom(200,10,0.5),scale=1,width=1)
stem(rbinom(200,10,0.5),scale=1,width=1)
stem(rbinom(500,10,0.5),scale=1,width=1)
stem(rbinom(500,10,0.5),scale=1,width=1)
stem(rbinom(500,10,0.5),scale=1,width=1)
stem(rbinom(500,10,0.5),scale=1,width=1)
stem(rbinom(500,10,0.5),scale=1,width=1)
stem(rbinom(500,10,0.5),scale=1,width=1)
stem(rbinom(500,10,0.5),scale=1,width=1)
stem(rbinom(500,10,0.5),scale=1,width=1)
stem(rbinom(500,10,0.5),scale=1,width=1)
stem(rbinom(500,10,0.5),scale=1,width=1)
stem(rbinom(500,10,0.5),scale=1,width=1)
stem(rbinom(500,10,0.5),scale=1,width=1)
stem(rbinom(500,10,0.5),scale=1,width=1)
stem(rbinom(500,10,0.5),scale=1,width=1)
stem(rbinom(1000,10,0.5),scale=1,width=1)
stem(rbinom(1000,10,0.5),scale=1,width=1)
stem(rbinom(1000,10,0.5),scale=1,width=1)
stem(rbinom(1000,10,0.5),scale=1,width=1)
stem(rbinom(1000,10,0.5),scale=1,width=1)
stem(rbinom(1000,10,0.5),scale=1,width=1)
stem(rbinom(1000,10,0.5),scale=1,width=1)
stem(rbinom(500,10,0.5),scale=1,width=1)
stem(rbinom(500,10,0.5),scale=1,width=1)
stem(rbinom(500,10,0.5),scale=1,width=1)
stem(rbinom(500,10,0.5),scale=1,width=1)
stem(rbinom(500,10,0.5),scale=1,width=1)
stem(rbinom(5000,10,0.5),scale=1,width=1)
stem(rbinom(5000,10,0.5),scale=1,width=1)
stem(rbinom(5000,10,0.5),scale=1,width=1)
stem(rbinom(5000,10,0.5),scale=1,width=1)
stem(rbinom(5000,10,0.5),scale=1,width=1)
stem(rbinom(5000,10,0.5),scale=1,width=1)
stem(rbinom(5000,10,0.5),scale=1,width=1)
stem(rbinom(5000,10,0.5),scale=1,width=1)
stem(rbinom(5000,10,0.5),scale=1,width=1)
stem(rbinom(5000,10,0.5),scale=1,width=1)
stem(rbinom(5000,10,0.5),scale=1,width=1)
stem(rbinom(5000,10,0.5),scale=1,width=1)
stem(rbinom(5000,10,0.5),scale=1,width=1)
library(igraph)
install.packages("igraph")
library(igraph)
# Create a directed graph
g <- graph(c(0,1, 0,2, 1,3, 0,3), directed=T)
?library
require(igraph)
g <- graph(c(0,1, 0,2, 1,3, 0,3), directed=T)
library(igraph)
g <- graph(c(0,1, 0,2, 1,3, 0,3), directed=T)
?graph
g <- make_graph(c(0,1, 0,2, 1,3, 0,3), directed=T)
g <- make_graph(c(1, 2, 2, 3, 3, 4, 5, 6), directed = FALSE)
g
g1 <- make_graph(c(0, 1, 0, 2, 1, 3, 0, 3), directed=T)
g1 <- make_graph(c(1, 2, 1, 3, 2, 4, 1, 4), directed=T)
g1
# node 0 not allowed
# Create a directed graph using adjacency matrix
m <- matrix(runif(4*4), nrow=4)
m
g2 <- <- graph.adjacency(m > 0.5)
g2 <- graph.adjacency(m > 0.5)
g2
plot(g2, layout=layout.fruchterman.reingold)
# Code based on
# http://horicky.blogspot.nl/2012/04/basic-graph-analytics-using-igraph.html
g1 <- graph.full(4)
g1
gr1 <- graph.full(4)
gr1
#Create a ring graph
gr2 <- <- graph.ring(3)
gr2 <- graph.ring(3)
gr2
#Combine 2 graphs
g <- g1 %du% g2
gr3 <- g1 %du% g2
gr3 <- gr1 %du% gr2
gr3
graph.difference(gr3, graph(c(0,1,0,2), directed=F))
graph.difference(gr3, graph(c(1,2,1,3), directed=F))
# Create a lattice
gr4 = graph.lattice(c(3,4,2))
# Create a tree
gr5 = graph.tree(12, children=2)
gr4
gr5
plot(gr4, layout=layout.fruchterman.reingold)
plot(gr5, layout=layout.fruchterman.reingold)
?plot
?igraph.plot
?graph.plot
?graph.lattice
methods(plot)
?plot.igraph
plot(gr5, layout=layout.star)
plot(gr5, layout=layout.randomly)
plot(gr5, layout=layout.dh)
?plot.igraph.layout
?plot.igraph.list
??plot.igraph.layout
??plot.igraph
plot(gr5, layout=layout_with_dh)
plot(gr5, layout=layout_on_sphere)
plot(gr5, layout=layout_in_circle)
plot(gr5, layout=layout_as_tree)
plot(gr5, layout=layout.auto)
d = c(12,17,24,18,31,17,21,20,14,9,25)
summary(d)
boxplot(d)
?boxplot
boxplot(d,horizontal = TRUE)
hist(rbinom(500,10,0.5))
hist(rbinom(5000,10,0.5))
hist(rbinom(50000,10,0.5))
hist(rbinom(50,10,0.5))
hist(rbinom(50,10,0.5))
stem(rbinom(5000,10,0.5),scale=1,width=1)
stem(rbinom(50000,10,0.5),scale=1,width=1)
stem(rbinom(5000,10,0.5),scale=1,width=1)
stem(rbinom(5000,10,0.5),scale=1,width=1)
stem(rbinom(5000,10,0.5),scale=1,width=1)
stem(rbinom(50,10,0.5),scale=1,width=1)
stem(rbinom(50,10,0.5),scale=1,width=1)
stem(rbinom(50,10,0.5),scale=1,width=1)
stem(rbinom(50,10,0.5),scale=1,width=1)
stem(rbinom(50,10,0.5),scale=1,width=1)
stem(rbinom(50,10,0.5),scale=1,width=1)
stem(rbinom(50,10,0.5),scale=1,width=1)
stem(rbinom(50,10,0.5),scale=1,width=1)
stem(rbinom(50,10,0.5),scale=1,width=1)
stem(rbinom(50,10,0.5),scale=1,width=1)
stem(rbinom(50,10,0.5),scale=1,width=1)
stem(rbinom(50,10,0.5),scale=1,width=1)
load("D:/Bob11/Coursera/Exploratory_Data_Analysis/Projects/Project2/.RData")
Baltveh
which((Balt$SCC==SCCmergeveh$SCC[1]))
ttt <- which((Balt$SCC==SCCmergeveh$SCC[1]))
ttt
for (i in ttt) {}
for (i in ttt) {}
for (i in ttt) {}
for (i in ttt) { }
for (i in ttt) { i}
for (i in 1:3) {}
for (i in 1:3) {i}
for (i in 1:3) {print i}
for (i in ttt) print i
for (i in ttt) print(i)
for (i in ttt) {print(i)
}
for (i in ttt) { print(i)}
for (i in ttt)
{}
fff <- function(aaa) {}
fff <- function(aaa)
{for (i in aaa) print(i)}
fff(ttt)
ff1<-fff(ttt)
ff1
fff <- function(aaa)
{for (i in aaa) i}
ff1<-fff(ttt)
ff1
fff <- function(aaa)
j = 1
fff <- function(aaa)
{j=1}
fff <- function(aaa) {
j=1
for(i in aaa) {
out1[j] <- i
j=j+1
}
out1
}
ff1<-fff(ttt)
percentChange <- function(x)
{
100*(x[-1]/x[-length(x)]-1)
}
sales <- c(100,105,110,105,100)
percentChange(sales)
out1 <- NULL
ff1<-fff(ttt)
ff1
out1
length(Balt)
?length
dim(Balat)
dim(Balt)
dim(Balt)[1]
which((Balt$SCC==SCCmergeveh$SCC[2]))
which((Balt$SCC==SCCmergeveh$SCC[3]))
SCCmergeveh1 <- SCCmergeveh$SCC
SCCmergeveh1u <- unique(SCCmergeveh1)
which(Balt$SCC==SCCmergeveh1u)
which(Balt$SCC==SCCmergeveh1u[1])
which(Balt$SCC==SCCmergeveh1u[2])
which(Balt$SCC==SCCmergeveh1u[3])
which(Balt$SCC==SCCmergeveh1u[4])
a <- c(1,2)
b <- c(2,3)
c <- c(a,b)
c
unique(c)
dim(SCCmergeveh1u)
length(SCCmergeveh1u)
d <- c(c,which(Balt$SCC==SCCmergeveh1u[3]))
d
unique(d)
a <- c()
for ( mlen in (1:length(SCCmergeveh1u)) {
indx <- which(Balt$SCC==SCCmergeveh1u[mlen])
a <- c(a,indx)
}
for ( mlen in (1:length(SCCmergeveh1u))) {
indx <- which(Balt$SCC==SCCmergeveh1u[mlen])
a <- c(a,indx)
}
b <- unique(a)
Baltveh <- NULL
Balt[a[1]]
Balt[a[1],]
for (mlen in (1:length(a))) {
Baltveh[mlen] <- Balt[a[mlen],]
}
head(Baltveh)
Balt[a[1],]
a[1]
Baltveh <- NULL
Baltveh[1] <= Balt[a[1],]
Baltveh[1] <- Balt[a[1],]
Baltveh
Baltveh <- Balt
for (mlen in (1:length(a))) {
Baltveh[mlen] <- Balt[a[mlen],]
}
Baltveh[1]
dim(Baltveh)
Baltveh[2]
for (mlen in (1:3)) { # (1:length(a))
print(Balt[a[mlen],])
#  Baltveh[mlen] <- Balt[a[mlen],]
}
Balt[1]
Balt[1,]
Baltveh[2,]
setwd("D:/Bob11/Coursera/Developing_Data_Products/Shiny/Prediction")
dir()
runApp()
library("shiny", lib.loc="~/R/win-library/3.1")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp(displayMode = 'showcase')
setwd("D:/Bob11/Coursera/Developing_Data_Products/Slidify/sample/project/first_deck")
browseURL("index.html")
publish(user = "rfvange", repo = "Slidify_Test")
dir9
dir()
publish_github(rfvange,Slidify_Test)
library("slidify", lib.loc="~/R/win-library/3.1")
publish_github(rfvange,Slidify_Test)
?publish_github
publish_github("rfvange","Slidify_Test")
# This tried to work, but I need http://Slidify_Test.github.com/rfvange
?publish_github
browseURL("index.html")
